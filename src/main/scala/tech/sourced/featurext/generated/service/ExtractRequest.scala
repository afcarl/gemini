// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package tech.sourced.featurext.generated.service

@SerialVersionUID(0L)
final case class ExtractRequest(
    uast: scala.Option[gopkg.in.bblfsh.sdk.v1.uast.generated.Node] = None,
    identifiers: scala.Option[tech.sourced.featurext.generated.service.IdentifiersOptions] = None,
    literals: scala.Option[tech.sourced.featurext.generated.service.LiteralsOptions] = None,
    uast2Seq: scala.Option[tech.sourced.featurext.generated.service.Uast2seqOptions] = None,
    graphlet: scala.Option[tech.sourced.featurext.generated.service.GraphletOptions] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[ExtractRequest] with scalapb.lenses.Updatable[ExtractRequest] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (uast.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(uast.get.serializedSize) + uast.get.serializedSize }
      if (identifiers.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(identifiers.get.serializedSize) + identifiers.get.serializedSize }
      if (literals.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(literals.get.serializedSize) + literals.get.serializedSize }
      if (uast2Seq.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(uast2Seq.get.serializedSize) + uast2Seq.get.serializedSize }
      if (graphlet.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(graphlet.get.serializedSize) + graphlet.get.serializedSize }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      uast.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      identifiers.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      literals.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      uast2Seq.foreach { __v =>
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      graphlet.foreach { __v =>
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): tech.sourced.featurext.generated.service.ExtractRequest = {
      var __uast = this.uast
      var __identifiers = this.identifiers
      var __literals = this.literals
      var __uast2Seq = this.uast2Seq
      var __graphlet = this.graphlet
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __uast = Option(_root_.scalapb.LiteParser.readMessage(_input__, __uast.getOrElse(gopkg.in.bblfsh.sdk.v1.uast.generated.Node.defaultInstance)))
          case 18 =>
            __identifiers = Option(_root_.scalapb.LiteParser.readMessage(_input__, __identifiers.getOrElse(tech.sourced.featurext.generated.service.IdentifiersOptions.defaultInstance)))
          case 26 =>
            __literals = Option(_root_.scalapb.LiteParser.readMessage(_input__, __literals.getOrElse(tech.sourced.featurext.generated.service.LiteralsOptions.defaultInstance)))
          case 34 =>
            __uast2Seq = Option(_root_.scalapb.LiteParser.readMessage(_input__, __uast2Seq.getOrElse(tech.sourced.featurext.generated.service.Uast2seqOptions.defaultInstance)))
          case 42 =>
            __graphlet = Option(_root_.scalapb.LiteParser.readMessage(_input__, __graphlet.getOrElse(tech.sourced.featurext.generated.service.GraphletOptions.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      tech.sourced.featurext.generated.service.ExtractRequest(
          uast = __uast,
          identifiers = __identifiers,
          literals = __literals,
          uast2Seq = __uast2Seq,
          graphlet = __graphlet
      )
    }
    def getUast: gopkg.in.bblfsh.sdk.v1.uast.generated.Node = uast.getOrElse(gopkg.in.bblfsh.sdk.v1.uast.generated.Node.defaultInstance)
    def clearUast: ExtractRequest = copy(uast = None)
    def withUast(__v: gopkg.in.bblfsh.sdk.v1.uast.generated.Node): ExtractRequest = copy(uast = Option(__v))
    def getIdentifiers: tech.sourced.featurext.generated.service.IdentifiersOptions = identifiers.getOrElse(tech.sourced.featurext.generated.service.IdentifiersOptions.defaultInstance)
    def clearIdentifiers: ExtractRequest = copy(identifiers = None)
    def withIdentifiers(__v: tech.sourced.featurext.generated.service.IdentifiersOptions): ExtractRequest = copy(identifiers = Option(__v))
    def getLiterals: tech.sourced.featurext.generated.service.LiteralsOptions = literals.getOrElse(tech.sourced.featurext.generated.service.LiteralsOptions.defaultInstance)
    def clearLiterals: ExtractRequest = copy(literals = None)
    def withLiterals(__v: tech.sourced.featurext.generated.service.LiteralsOptions): ExtractRequest = copy(literals = Option(__v))
    def getUast2Seq: tech.sourced.featurext.generated.service.Uast2seqOptions = uast2Seq.getOrElse(tech.sourced.featurext.generated.service.Uast2seqOptions.defaultInstance)
    def clearUast2Seq: ExtractRequest = copy(uast2Seq = None)
    def withUast2Seq(__v: tech.sourced.featurext.generated.service.Uast2seqOptions): ExtractRequest = copy(uast2Seq = Option(__v))
    def getGraphlet: tech.sourced.featurext.generated.service.GraphletOptions = graphlet.getOrElse(tech.sourced.featurext.generated.service.GraphletOptions.defaultInstance)
    def clearGraphlet: ExtractRequest = copy(graphlet = None)
    def withGraphlet(__v: tech.sourced.featurext.generated.service.GraphletOptions): ExtractRequest = copy(graphlet = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => uast.orNull
        case 2 => identifiers.orNull
        case 3 => literals.orNull
        case 4 => uast2Seq.orNull
        case 5 => graphlet.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => uast.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => identifiers.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => literals.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => uast2Seq.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => graphlet.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = tech.sourced.featurext.generated.service.ExtractRequest
}

object ExtractRequest extends scalapb.GeneratedMessageCompanion[tech.sourced.featurext.generated.service.ExtractRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[tech.sourced.featurext.generated.service.ExtractRequest] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): tech.sourced.featurext.generated.service.ExtractRequest = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    tech.sourced.featurext.generated.service.ExtractRequest(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[gopkg.in.bblfsh.sdk.v1.uast.generated.Node]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[tech.sourced.featurext.generated.service.IdentifiersOptions]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[tech.sourced.featurext.generated.service.LiteralsOptions]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[tech.sourced.featurext.generated.service.Uast2seqOptions]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[tech.sourced.featurext.generated.service.GraphletOptions]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[tech.sourced.featurext.generated.service.ExtractRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      tech.sourced.featurext.generated.service.ExtractRequest(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[gopkg.in.bblfsh.sdk.v1.uast.generated.Node]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[tech.sourced.featurext.generated.service.IdentifiersOptions]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[tech.sourced.featurext.generated.service.LiteralsOptions]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[tech.sourced.featurext.generated.service.Uast2seqOptions]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[tech.sourced.featurext.generated.service.GraphletOptions]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ServiceProto.javaDescriptor.getMessageTypes.get(4)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ServiceProto.scalaDescriptor.messages(4)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = gopkg.in.bblfsh.sdk.v1.uast.generated.Node
      case 2 => __out = tech.sourced.featurext.generated.service.IdentifiersOptions
      case 3 => __out = tech.sourced.featurext.generated.service.LiteralsOptions
      case 4 => __out = tech.sourced.featurext.generated.service.Uast2seqOptions
      case 5 => __out = tech.sourced.featurext.generated.service.GraphletOptions
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = tech.sourced.featurext.generated.service.ExtractRequest(
  )
  implicit class ExtractRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, tech.sourced.featurext.generated.service.ExtractRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, tech.sourced.featurext.generated.service.ExtractRequest](_l) {
    def uast: _root_.scalapb.lenses.Lens[UpperPB, gopkg.in.bblfsh.sdk.v1.uast.generated.Node] = field(_.getUast)((c_, f_) => c_.copy(uast = Option(f_)))
    def optionalUast: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[gopkg.in.bblfsh.sdk.v1.uast.generated.Node]] = field(_.uast)((c_, f_) => c_.copy(uast = f_))
    def identifiers: _root_.scalapb.lenses.Lens[UpperPB, tech.sourced.featurext.generated.service.IdentifiersOptions] = field(_.getIdentifiers)((c_, f_) => c_.copy(identifiers = Option(f_)))
    def optionalIdentifiers: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[tech.sourced.featurext.generated.service.IdentifiersOptions]] = field(_.identifiers)((c_, f_) => c_.copy(identifiers = f_))
    def literals: _root_.scalapb.lenses.Lens[UpperPB, tech.sourced.featurext.generated.service.LiteralsOptions] = field(_.getLiterals)((c_, f_) => c_.copy(literals = Option(f_)))
    def optionalLiterals: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[tech.sourced.featurext.generated.service.LiteralsOptions]] = field(_.literals)((c_, f_) => c_.copy(literals = f_))
    def uast2Seq: _root_.scalapb.lenses.Lens[UpperPB, tech.sourced.featurext.generated.service.Uast2seqOptions] = field(_.getUast2Seq)((c_, f_) => c_.copy(uast2Seq = Option(f_)))
    def optionalUast2Seq: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[tech.sourced.featurext.generated.service.Uast2seqOptions]] = field(_.uast2Seq)((c_, f_) => c_.copy(uast2Seq = f_))
    def graphlet: _root_.scalapb.lenses.Lens[UpperPB, tech.sourced.featurext.generated.service.GraphletOptions] = field(_.getGraphlet)((c_, f_) => c_.copy(graphlet = Option(f_)))
    def optionalGraphlet: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[tech.sourced.featurext.generated.service.GraphletOptions]] = field(_.graphlet)((c_, f_) => c_.copy(graphlet = f_))
  }
  final val UAST_FIELD_NUMBER = 1
  final val IDENTIFIERS_FIELD_NUMBER = 2
  final val LITERALS_FIELD_NUMBER = 3
  final val UAST2SEQ_FIELD_NUMBER = 4
  final val GRAPHLET_FIELD_NUMBER = 5
}
