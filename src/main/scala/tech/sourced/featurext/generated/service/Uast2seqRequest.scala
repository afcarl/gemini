// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package tech.sourced.featurext.generated.service

/** The uast2seq request message containing extractor configuration and uast.
  */
@SerialVersionUID(0L)
final case class Uast2seqRequest(
    uast: scala.Option[gopkg.in.bblfsh.sdk.v1.uast.generated.Node] = None,
    options: scala.Option[tech.sourced.featurext.generated.service.Uast2seqOptions] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[Uast2seqRequest] with scalapb.lenses.Updatable[Uast2seqRequest] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (uast.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(uast.get.serializedSize) + uast.get.serializedSize }
      if (options.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(options.get.serializedSize) + options.get.serializedSize }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      uast.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      options.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): tech.sourced.featurext.generated.service.Uast2seqRequest = {
      var __uast = this.uast
      var __options = this.options
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __uast = Option(_root_.scalapb.LiteParser.readMessage(_input__, __uast.getOrElse(gopkg.in.bblfsh.sdk.v1.uast.generated.Node.defaultInstance)))
          case 18 =>
            __options = Option(_root_.scalapb.LiteParser.readMessage(_input__, __options.getOrElse(tech.sourced.featurext.generated.service.Uast2seqOptions.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      tech.sourced.featurext.generated.service.Uast2seqRequest(
          uast = __uast,
          options = __options
      )
    }
    def getUast: gopkg.in.bblfsh.sdk.v1.uast.generated.Node = uast.getOrElse(gopkg.in.bblfsh.sdk.v1.uast.generated.Node.defaultInstance)
    def clearUast: Uast2seqRequest = copy(uast = None)
    def withUast(__v: gopkg.in.bblfsh.sdk.v1.uast.generated.Node): Uast2seqRequest = copy(uast = Option(__v))
    def getOptions: tech.sourced.featurext.generated.service.Uast2seqOptions = options.getOrElse(tech.sourced.featurext.generated.service.Uast2seqOptions.defaultInstance)
    def clearOptions: Uast2seqRequest = copy(options = None)
    def withOptions(__v: tech.sourced.featurext.generated.service.Uast2seqOptions): Uast2seqRequest = copy(options = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => uast.orNull
        case 2 => options.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => uast.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => options.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = tech.sourced.featurext.generated.service.Uast2seqRequest
}

object Uast2seqRequest extends scalapb.GeneratedMessageCompanion[tech.sourced.featurext.generated.service.Uast2seqRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[tech.sourced.featurext.generated.service.Uast2seqRequest] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): tech.sourced.featurext.generated.service.Uast2seqRequest = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    tech.sourced.featurext.generated.service.Uast2seqRequest(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[gopkg.in.bblfsh.sdk.v1.uast.generated.Node]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[tech.sourced.featurext.generated.service.Uast2seqOptions]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[tech.sourced.featurext.generated.service.Uast2seqRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      tech.sourced.featurext.generated.service.Uast2seqRequest(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[gopkg.in.bblfsh.sdk.v1.uast.generated.Node]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[tech.sourced.featurext.generated.service.Uast2seqOptions]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ServiceProto.javaDescriptor.getMessageTypes.get(7)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ServiceProto.scalaDescriptor.messages(7)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = gopkg.in.bblfsh.sdk.v1.uast.generated.Node
      case 2 => __out = tech.sourced.featurext.generated.service.Uast2seqOptions
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = tech.sourced.featurext.generated.service.Uast2seqRequest(
  )
  implicit class Uast2seqRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, tech.sourced.featurext.generated.service.Uast2seqRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, tech.sourced.featurext.generated.service.Uast2seqRequest](_l) {
    def uast: _root_.scalapb.lenses.Lens[UpperPB, gopkg.in.bblfsh.sdk.v1.uast.generated.Node] = field(_.getUast)((c_, f_) => c_.copy(uast = Option(f_)))
    def optionalUast: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[gopkg.in.bblfsh.sdk.v1.uast.generated.Node]] = field(_.uast)((c_, f_) => c_.copy(uast = f_))
    def options: _root_.scalapb.lenses.Lens[UpperPB, tech.sourced.featurext.generated.service.Uast2seqOptions] = field(_.getOptions)((c_, f_) => c_.copy(options = Option(f_)))
    def optionalOptions: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[tech.sourced.featurext.generated.service.Uast2seqOptions]] = field(_.options)((c_, f_) => c_.copy(options = f_))
  }
  final val UAST_FIELD_NUMBER = 1
  final val OPTIONS_FIELD_NUMBER = 2
}
